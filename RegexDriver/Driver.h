#pragma once
#include <ntifs.h>
#include <ntddk.h>

#define IOCTL_READ_MEMORY CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_WRITE_MEMORY CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_QUERY_MEMORY_INFO CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_GET_PROCESS_ID CTL_CODE(FILE_DEVICE_UNKNOWN, 0x803, METHOD_BUFFERED, FILE_ANY_ACCESS)
typedef struct _MEMORY_OPERATION {
    HANDLE ProcessId;
    PVOID SourceAddress;
    PVOID TargetAddress;
    SIZE_T Size;
} MEMORY_OPERATION, * PMEMORY_OPERATION;

typedef struct _MEMORY_INFO {
    HANDLE ProcessId;
    PVOID Address;
    MEMORY_BASIC_INFORMATION MemoryInfo;
} MEMORY_INFO, * PMEMORY_INFO;





NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath);
VOID DriverUnload(PDRIVER_OBJECT DriverObject);
NTSTATUS DriverDispatch(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS ReadMemory(PEPROCESS Process, PVOID SourceAddress, PVOID TargetAddress, SIZE_T Size);
NTSTATUS WriteMemory(PEPROCESS Process, PVOID SourceAddress, PVOID TargetAddress, SIZE_T Size);
NTSTATUS QueryVirtualMemory(PEPROCESS Process, PVOID Address, PMEMORY_BASIC_INFORMATION MemoryInfo);

#pragma once
